package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i route256/checkout/internal/domain.ProductClient -o ./mocks/product_client_minimock.go -n ProductClientMock

import (
	"context"
	mm_domain "route256/checkout/internal/domain"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ProductClientMock implements domain.ProductClient
type ProductClientMock struct {
	t minimock.Tester

	funcGetProduct          func(ctx context.Context, token string, sku uint32) (p1 mm_domain.Product, err error)
	inspectFuncGetProduct   func(ctx context.Context, token string, sku uint32)
	afterGetProductCounter  uint64
	beforeGetProductCounter uint64
	GetProductMock          mProductClientMockGetProduct

	funcGetProducts          func(ctx context.Context, token string, skus []uint32) (m1 map[uint32]mm_domain.Product, err error)
	inspectFuncGetProducts   func(ctx context.Context, token string, skus []uint32)
	afterGetProductsCounter  uint64
	beforeGetProductsCounter uint64
	GetProductsMock          mProductClientMockGetProducts
}

// NewProductClientMock returns a mock for domain.ProductClient
func NewProductClientMock(t minimock.Tester) *ProductClientMock {
	m := &ProductClientMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetProductMock = mProductClientMockGetProduct{mock: m}
	m.GetProductMock.callArgs = []*ProductClientMockGetProductParams{}

	m.GetProductsMock = mProductClientMockGetProducts{mock: m}
	m.GetProductsMock.callArgs = []*ProductClientMockGetProductsParams{}

	return m
}

type mProductClientMockGetProduct struct {
	mock               *ProductClientMock
	defaultExpectation *ProductClientMockGetProductExpectation
	expectations       []*ProductClientMockGetProductExpectation

	callArgs []*ProductClientMockGetProductParams
	mutex    sync.RWMutex
}

// ProductClientMockGetProductExpectation specifies expectation struct of the ProductClient.GetProduct
type ProductClientMockGetProductExpectation struct {
	mock    *ProductClientMock
	params  *ProductClientMockGetProductParams
	results *ProductClientMockGetProductResults
	Counter uint64
}

// ProductClientMockGetProductParams contains parameters of the ProductClient.GetProduct
type ProductClientMockGetProductParams struct {
	ctx   context.Context
	token string
	sku   uint32
}

// ProductClientMockGetProductResults contains results of the ProductClient.GetProduct
type ProductClientMockGetProductResults struct {
	p1  mm_domain.Product
	err error
}

// Expect sets up expected params for ProductClient.GetProduct
func (mmGetProduct *mProductClientMockGetProduct) Expect(ctx context.Context, token string, sku uint32) *mProductClientMockGetProduct {
	if mmGetProduct.mock.funcGetProduct != nil {
		mmGetProduct.mock.t.Fatalf("ProductClientMock.GetProduct mock is already set by Set")
	}

	if mmGetProduct.defaultExpectation == nil {
		mmGetProduct.defaultExpectation = &ProductClientMockGetProductExpectation{}
	}

	mmGetProduct.defaultExpectation.params = &ProductClientMockGetProductParams{ctx, token, sku}
	for _, e := range mmGetProduct.expectations {
		if minimock.Equal(e.params, mmGetProduct.defaultExpectation.params) {
			mmGetProduct.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetProduct.defaultExpectation.params)
		}
	}

	return mmGetProduct
}

// Inspect accepts an inspector function that has same arguments as the ProductClient.GetProduct
func (mmGetProduct *mProductClientMockGetProduct) Inspect(f func(ctx context.Context, token string, sku uint32)) *mProductClientMockGetProduct {
	if mmGetProduct.mock.inspectFuncGetProduct != nil {
		mmGetProduct.mock.t.Fatalf("Inspect function is already set for ProductClientMock.GetProduct")
	}

	mmGetProduct.mock.inspectFuncGetProduct = f

	return mmGetProduct
}

// Return sets up results that will be returned by ProductClient.GetProduct
func (mmGetProduct *mProductClientMockGetProduct) Return(p1 mm_domain.Product, err error) *ProductClientMock {
	if mmGetProduct.mock.funcGetProduct != nil {
		mmGetProduct.mock.t.Fatalf("ProductClientMock.GetProduct mock is already set by Set")
	}

	if mmGetProduct.defaultExpectation == nil {
		mmGetProduct.defaultExpectation = &ProductClientMockGetProductExpectation{mock: mmGetProduct.mock}
	}
	mmGetProduct.defaultExpectation.results = &ProductClientMockGetProductResults{p1, err}
	return mmGetProduct.mock
}

// Set uses given function f to mock the ProductClient.GetProduct method
func (mmGetProduct *mProductClientMockGetProduct) Set(f func(ctx context.Context, token string, sku uint32) (p1 mm_domain.Product, err error)) *ProductClientMock {
	if mmGetProduct.defaultExpectation != nil {
		mmGetProduct.mock.t.Fatalf("Default expectation is already set for the ProductClient.GetProduct method")
	}

	if len(mmGetProduct.expectations) > 0 {
		mmGetProduct.mock.t.Fatalf("Some expectations are already set for the ProductClient.GetProduct method")
	}

	mmGetProduct.mock.funcGetProduct = f
	return mmGetProduct.mock
}

// When sets expectation for the ProductClient.GetProduct which will trigger the result defined by the following
// Then helper
func (mmGetProduct *mProductClientMockGetProduct) When(ctx context.Context, token string, sku uint32) *ProductClientMockGetProductExpectation {
	if mmGetProduct.mock.funcGetProduct != nil {
		mmGetProduct.mock.t.Fatalf("ProductClientMock.GetProduct mock is already set by Set")
	}

	expectation := &ProductClientMockGetProductExpectation{
		mock:   mmGetProduct.mock,
		params: &ProductClientMockGetProductParams{ctx, token, sku},
	}
	mmGetProduct.expectations = append(mmGetProduct.expectations, expectation)
	return expectation
}

// Then sets up ProductClient.GetProduct return parameters for the expectation previously defined by the When method
func (e *ProductClientMockGetProductExpectation) Then(p1 mm_domain.Product, err error) *ProductClientMock {
	e.results = &ProductClientMockGetProductResults{p1, err}
	return e.mock
}

// GetProduct implements domain.ProductClient
func (mmGetProduct *ProductClientMock) GetProduct(ctx context.Context, token string, sku uint32) (p1 mm_domain.Product, err error) {
	mm_atomic.AddUint64(&mmGetProduct.beforeGetProductCounter, 1)
	defer mm_atomic.AddUint64(&mmGetProduct.afterGetProductCounter, 1)

	if mmGetProduct.inspectFuncGetProduct != nil {
		mmGetProduct.inspectFuncGetProduct(ctx, token, sku)
	}

	mm_params := &ProductClientMockGetProductParams{ctx, token, sku}

	// Record call args
	mmGetProduct.GetProductMock.mutex.Lock()
	mmGetProduct.GetProductMock.callArgs = append(mmGetProduct.GetProductMock.callArgs, mm_params)
	mmGetProduct.GetProductMock.mutex.Unlock()

	for _, e := range mmGetProduct.GetProductMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.p1, e.results.err
		}
	}

	if mmGetProduct.GetProductMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetProduct.GetProductMock.defaultExpectation.Counter, 1)
		mm_want := mmGetProduct.GetProductMock.defaultExpectation.params
		mm_got := ProductClientMockGetProductParams{ctx, token, sku}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetProduct.t.Errorf("ProductClientMock.GetProduct got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetProduct.GetProductMock.defaultExpectation.results
		if mm_results == nil {
			mmGetProduct.t.Fatal("No results are set for the ProductClientMock.GetProduct")
		}
		return (*mm_results).p1, (*mm_results).err
	}
	if mmGetProduct.funcGetProduct != nil {
		return mmGetProduct.funcGetProduct(ctx, token, sku)
	}
	mmGetProduct.t.Fatalf("Unexpected call to ProductClientMock.GetProduct. %v %v %v", ctx, token, sku)
	return
}

// GetProductAfterCounter returns a count of finished ProductClientMock.GetProduct invocations
func (mmGetProduct *ProductClientMock) GetProductAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProduct.afterGetProductCounter)
}

// GetProductBeforeCounter returns a count of ProductClientMock.GetProduct invocations
func (mmGetProduct *ProductClientMock) GetProductBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProduct.beforeGetProductCounter)
}

// Calls returns a list of arguments used in each call to ProductClientMock.GetProduct.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetProduct *mProductClientMockGetProduct) Calls() []*ProductClientMockGetProductParams {
	mmGetProduct.mutex.RLock()

	argCopy := make([]*ProductClientMockGetProductParams, len(mmGetProduct.callArgs))
	copy(argCopy, mmGetProduct.callArgs)

	mmGetProduct.mutex.RUnlock()

	return argCopy
}

// MinimockGetProductDone returns true if the count of the GetProduct invocations corresponds
// the number of defined expectations
func (m *ProductClientMock) MinimockGetProductDone() bool {
	for _, e := range m.GetProductMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetProductMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetProductCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProduct != nil && mm_atomic.LoadUint64(&m.afterGetProductCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetProductInspect logs each unmet expectation
func (m *ProductClientMock) MinimockGetProductInspect() {
	for _, e := range m.GetProductMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProductClientMock.GetProduct with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetProductMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetProductCounter) < 1 {
		if m.GetProductMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ProductClientMock.GetProduct")
		} else {
			m.t.Errorf("Expected call to ProductClientMock.GetProduct with params: %#v", *m.GetProductMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProduct != nil && mm_atomic.LoadUint64(&m.afterGetProductCounter) < 1 {
		m.t.Error("Expected call to ProductClientMock.GetProduct")
	}
}

type mProductClientMockGetProducts struct {
	mock               *ProductClientMock
	defaultExpectation *ProductClientMockGetProductsExpectation
	expectations       []*ProductClientMockGetProductsExpectation

	callArgs []*ProductClientMockGetProductsParams
	mutex    sync.RWMutex
}

// ProductClientMockGetProductsExpectation specifies expectation struct of the ProductClient.GetProducts
type ProductClientMockGetProductsExpectation struct {
	mock    *ProductClientMock
	params  *ProductClientMockGetProductsParams
	results *ProductClientMockGetProductsResults
	Counter uint64
}

// ProductClientMockGetProductsParams contains parameters of the ProductClient.GetProducts
type ProductClientMockGetProductsParams struct {
	ctx   context.Context
	token string
	skus  []uint32
}

// ProductClientMockGetProductsResults contains results of the ProductClient.GetProducts
type ProductClientMockGetProductsResults struct {
	m1  map[uint32]mm_domain.Product
	err error
}

// Expect sets up expected params for ProductClient.GetProducts
func (mmGetProducts *mProductClientMockGetProducts) Expect(ctx context.Context, token string, skus []uint32) *mProductClientMockGetProducts {
	if mmGetProducts.mock.funcGetProducts != nil {
		mmGetProducts.mock.t.Fatalf("ProductClientMock.GetProducts mock is already set by Set")
	}

	if mmGetProducts.defaultExpectation == nil {
		mmGetProducts.defaultExpectation = &ProductClientMockGetProductsExpectation{}
	}

	mmGetProducts.defaultExpectation.params = &ProductClientMockGetProductsParams{ctx, token, skus}
	for _, e := range mmGetProducts.expectations {
		if minimock.Equal(e.params, mmGetProducts.defaultExpectation.params) {
			mmGetProducts.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetProducts.defaultExpectation.params)
		}
	}

	return mmGetProducts
}

// Inspect accepts an inspector function that has same arguments as the ProductClient.GetProducts
func (mmGetProducts *mProductClientMockGetProducts) Inspect(f func(ctx context.Context, token string, skus []uint32)) *mProductClientMockGetProducts {
	if mmGetProducts.mock.inspectFuncGetProducts != nil {
		mmGetProducts.mock.t.Fatalf("Inspect function is already set for ProductClientMock.GetProducts")
	}

	mmGetProducts.mock.inspectFuncGetProducts = f

	return mmGetProducts
}

// Return sets up results that will be returned by ProductClient.GetProducts
func (mmGetProducts *mProductClientMockGetProducts) Return(m1 map[uint32]mm_domain.Product, err error) *ProductClientMock {
	if mmGetProducts.mock.funcGetProducts != nil {
		mmGetProducts.mock.t.Fatalf("ProductClientMock.GetProducts mock is already set by Set")
	}

	if mmGetProducts.defaultExpectation == nil {
		mmGetProducts.defaultExpectation = &ProductClientMockGetProductsExpectation{mock: mmGetProducts.mock}
	}
	mmGetProducts.defaultExpectation.results = &ProductClientMockGetProductsResults{m1, err}
	return mmGetProducts.mock
}

// Set uses given function f to mock the ProductClient.GetProducts method
func (mmGetProducts *mProductClientMockGetProducts) Set(f func(ctx context.Context, token string, skus []uint32) (m1 map[uint32]mm_domain.Product, err error)) *ProductClientMock {
	if mmGetProducts.defaultExpectation != nil {
		mmGetProducts.mock.t.Fatalf("Default expectation is already set for the ProductClient.GetProducts method")
	}

	if len(mmGetProducts.expectations) > 0 {
		mmGetProducts.mock.t.Fatalf("Some expectations are already set for the ProductClient.GetProducts method")
	}

	mmGetProducts.mock.funcGetProducts = f
	return mmGetProducts.mock
}

// When sets expectation for the ProductClient.GetProducts which will trigger the result defined by the following
// Then helper
func (mmGetProducts *mProductClientMockGetProducts) When(ctx context.Context, token string, skus []uint32) *ProductClientMockGetProductsExpectation {
	if mmGetProducts.mock.funcGetProducts != nil {
		mmGetProducts.mock.t.Fatalf("ProductClientMock.GetProducts mock is already set by Set")
	}

	expectation := &ProductClientMockGetProductsExpectation{
		mock:   mmGetProducts.mock,
		params: &ProductClientMockGetProductsParams{ctx, token, skus},
	}
	mmGetProducts.expectations = append(mmGetProducts.expectations, expectation)
	return expectation
}

// Then sets up ProductClient.GetProducts return parameters for the expectation previously defined by the When method
func (e *ProductClientMockGetProductsExpectation) Then(m1 map[uint32]mm_domain.Product, err error) *ProductClientMock {
	e.results = &ProductClientMockGetProductsResults{m1, err}
	return e.mock
}

// GetProducts implements domain.ProductClient
func (mmGetProducts *ProductClientMock) GetProducts(ctx context.Context, token string, skus []uint32) (m1 map[uint32]mm_domain.Product, err error) {
	mm_atomic.AddUint64(&mmGetProducts.beforeGetProductsCounter, 1)
	defer mm_atomic.AddUint64(&mmGetProducts.afterGetProductsCounter, 1)

	if mmGetProducts.inspectFuncGetProducts != nil {
		mmGetProducts.inspectFuncGetProducts(ctx, token, skus)
	}

	mm_params := &ProductClientMockGetProductsParams{ctx, token, skus}

	// Record call args
	mmGetProducts.GetProductsMock.mutex.Lock()
	mmGetProducts.GetProductsMock.callArgs = append(mmGetProducts.GetProductsMock.callArgs, mm_params)
	mmGetProducts.GetProductsMock.mutex.Unlock()

	for _, e := range mmGetProducts.GetProductsMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.m1, e.results.err
		}
	}

	if mmGetProducts.GetProductsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetProducts.GetProductsMock.defaultExpectation.Counter, 1)
		mm_want := mmGetProducts.GetProductsMock.defaultExpectation.params
		mm_got := ProductClientMockGetProductsParams{ctx, token, skus}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetProducts.t.Errorf("ProductClientMock.GetProducts got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetProducts.GetProductsMock.defaultExpectation.results
		if mm_results == nil {
			mmGetProducts.t.Fatal("No results are set for the ProductClientMock.GetProducts")
		}
		return (*mm_results).m1, (*mm_results).err
	}
	if mmGetProducts.funcGetProducts != nil {
		return mmGetProducts.funcGetProducts(ctx, token, skus)
	}
	mmGetProducts.t.Fatalf("Unexpected call to ProductClientMock.GetProducts. %v %v %v", ctx, token, skus)
	return
}

// GetProductsAfterCounter returns a count of finished ProductClientMock.GetProducts invocations
func (mmGetProducts *ProductClientMock) GetProductsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProducts.afterGetProductsCounter)
}

// GetProductsBeforeCounter returns a count of ProductClientMock.GetProducts invocations
func (mmGetProducts *ProductClientMock) GetProductsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProducts.beforeGetProductsCounter)
}

// Calls returns a list of arguments used in each call to ProductClientMock.GetProducts.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetProducts *mProductClientMockGetProducts) Calls() []*ProductClientMockGetProductsParams {
	mmGetProducts.mutex.RLock()

	argCopy := make([]*ProductClientMockGetProductsParams, len(mmGetProducts.callArgs))
	copy(argCopy, mmGetProducts.callArgs)

	mmGetProducts.mutex.RUnlock()

	return argCopy
}

// MinimockGetProductsDone returns true if the count of the GetProducts invocations corresponds
// the number of defined expectations
func (m *ProductClientMock) MinimockGetProductsDone() bool {
	for _, e := range m.GetProductsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetProductsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetProductsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProducts != nil && mm_atomic.LoadUint64(&m.afterGetProductsCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetProductsInspect logs each unmet expectation
func (m *ProductClientMock) MinimockGetProductsInspect() {
	for _, e := range m.GetProductsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProductClientMock.GetProducts with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetProductsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetProductsCounter) < 1 {
		if m.GetProductsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ProductClientMock.GetProducts")
		} else {
			m.t.Errorf("Expected call to ProductClientMock.GetProducts with params: %#v", *m.GetProductsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProducts != nil && mm_atomic.LoadUint64(&m.afterGetProductsCounter) < 1 {
		m.t.Error("Expected call to ProductClientMock.GetProducts")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ProductClientMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetProductInspect()

		m.MinimockGetProductsInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ProductClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ProductClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetProductDone() &&
		m.MinimockGetProductsDone()
}
